{
    "input": "{\"task\": {\"step_number\": 1, \"description\": \"Perform raw data quality control on the paired-end RNA-Seq fastq files using fastp. This step will remove low-quality bases and sequencing adapters to obtain high-quality cleaned reads for reliable downstream analysis. The inputs are the raw paired-end fastq files, and the output will be cleaned fastq files with improved quality, ready for alignment.\", \"input_filename\": [\"./data/WGS_WES/minigenome.fa\", \"./data/WGS_WES/rnaseq_2.fastq.gz: RNA-Seq read 2 data (right read)\", \"./data/WGS_WES/rnaseq_1.fastq.gz: RNA-Seq read 1 data (left read)\", \"./data/WGS_WES/rnaseq_1.fastq.gz\", \"./data/WGS_WES/rnaseq_2.fastq.gz\"], \"output_filename\": [\"./output/001/clean_rnaseq_1.fastq.gz: cleaned RNA-Seq read 1 data\", \"./output/001/clean_rnaseq_2.fastq.gz: cleaned RNA-Seq read 2 data\"], \"tools\": \"fastp\"}, \"pre debug\": [], \"result\": \"/cs/student/projects2/aisd/2024/shekchu/miniconda/envs/biomaster/bin/python\\n\", \"related_docs\": \"5. filter.sh:\\n filter low_quality reads in basecall fastq file.\\nInput : basecall fastq file \\nOutput : a filtered fastq file.\\nUsage\\nRun the following in the container\\n./scripts/filter.sh <fastq> <out>  \\n# fastq : basecall fastq file.\\n# out : name of filtered fastq file. \\n\\n\\nSmall RNA sequencing and miRNA prediction workflow consists of the following key steps:\\n\\nStep 1: Quality Control and Trimming\\nDescription: Perform quality control on raw sequencing reads, remove low-quality reads, and trim sequencing adapters.\\nCommands:\\n  fastqc ./data/*.fastq.gz -o ./output/010/qc_reports/\\n  fastp -i ./data/C1.fastq.gz -o ./output/010/trimmed_C1.fastq.gz\\n\\nStep 2: Genome Alignment\\nDescription: Build index from genome and align reads with Bowtie1. Convert to sorted BAM.\\nCommands:\\n  bowtie-build ./data/genome.fa ./output/010/genome_index\\n  bowtie -S -p 16 ./output/010/genome_index ./output/010/trimmed_C1.fastq.gz > ./output/010/C1.sam\\n  samtools view -bS ./output/010/C1.sam | samtools sort -o ./output/010/aligned_C1.bam\\n  samtools index ./output/010/aligned_C1.bam\\nCheckpoint: Use `samtools flagstat` to verify alignments are not empty.\\n\\nStep 3: miRNA Quantification\\nDescription: Use featureCounts with a SAF annotation file.\\nCommands:\\n  python convert_fasta_to_saf.py -i ./data/miRBase_mature.fasta -o ./data/miRBase_mature.saf\\n  featureCounts -T 4 -F SAF -a ./data/miRBase_mature.saf -o ./output/010/miRNA_expression_matrix.txt ./output/010/aligned_C1.bam\\nCheckpoint: Ensure expression matrix has non-zero counts.\\n\\nStep 4: Novel miRNA Discovery\\nDescription: Collapse reads and predict novel miRNAs with miRDeep2.\\nCommands:\\n  mapper.pl ./output/010/trimmed_C1.fastq.gz -e -h -m -l 18 -s ./output/010/reads_collapsed.fa -t ./output/010/reads.arf -r ./data/genome.fa\\n  miRDeep2.pl ./output/010/reads_collapsed.fa ./data/genome.fa ./output/010/reads.arf ./data/miRBase_mature.fasta ./data/miRBase_hairpin.fasta -t Human > ./output/010/miRDeep2_results.txt\\nCheckpoint: Ensure result file contains predicted miRNAs.\", \"id\": \"001\", \"shell\": \"\"}"
}