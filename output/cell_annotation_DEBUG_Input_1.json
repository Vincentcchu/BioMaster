{
    "input": "{\"task\": {\"step_number\": 1, \"description\": \"Load the single-cell dataset from the provided JSON file containing variables nCount_RNA, nFeature_RNA, percent.mt, and nCount_SCT. Convert the data into an AnnData object format to facilitate downstream analysis using Scanpy and related Python tools.\", \"input_filename\": [\"./data/cell_annotation/dataset_debug_cleaned.json\", \"./output/cell_annotation/run_dim_reduction_neighbors.py\", \"./data/cell_annotation/dataset_debug_cleaned.json: contains variables nCount_RNA, nFeature_RNA, percent.mt, nCount_SCT\", \"./output/cell_annotation/normalize_hvg_scanpy.py\"], \"output_filename\": [\"./output/cell_annotation/adata_raw.h5ad: raw AnnData object containing unprocessed single-cell gene expression and metadata\"], \"tools\": \"Scanpy\"}, \"pre debug\": [], \"result\": \"/cs/student/projects2/aisd/2024/shekchu/miniconda/envs/biomaster/bin/python\\n\", \"related_docs\": \"Scanpy:# Step 1: Load the example dataset\\nadata = sc.datasets.pbmc3k()\\n\\n# Step 2: Preprocess the data\\nsc.pp.filter_genes(adata, min_cells=3)\\nsc.pp.normalize_total(adata)\\nsc.pp.log1p(adata)\\nsc.pp.highly_variable_genes(adata, flavor=\\\"seurat\\\", n_top_genes=2000)\\nadata = adata[:, adata.var.highly_variable]\\n\\n# Step 3: Calculate spatial neighbors\\nsc.pp.neighbors(adata)\\n\\n# Step 4: Calculate neighborhood enrichment\\nsc.tl.neighborhood_enrichment(adata, cluster_key=\\\"louvain\\\")\\n\\n# Step 5: Visualize the neighborhood enrichment results\\nsc.pl.neighborhood_enrichment(adata, cluster_key=\\\"louvain\\\")\\n\\n# Step 6: Calculate Ripley\\u2019s K statistic\\nsc.tl.ripley(adata, cluster_key=\\\"louvain\\\", mode=\\\"K\\\", max_dist=500)\\nsc.pl.ripley(adata, cluster_key=\\\"louvain\\\", mode=\\\"K\\\")\\n\\n# Step 7: Calculate ligand - receptor interactions\\nsc.tl.ligrec(adata, n_perms=100, cluster_key=\\\"louvain\\\", clusters=[\\\"CD14+ Monocytes\\\", \\\"CD4+ T cells\\\"])\\nsc.pl.ligrec(adata, cluster_key=\\\"louvain\\\", source_groups=\\\"CD4+ T cells\\\", target_groups=[\\\"CD14+ Monocytes\\\"], pvalue_threshold=0.05, swap_axes=True)\\n\\n# Step 8: Calculate spatial autocorrelation\\nsc.tl.spatial(adata)\\nprint(adata.uns[\\\"spatial\\\"].head(10))\\n\\nSingle-cell perform clustering analysis includes the following steps: Step 1: Data Reading and Initialization, reading .h5ad or 10x Genomics matrix.mtx files using scanpy.read_10x_mtx or scanpy.read_h5ad to generate an AnnData object containing the raw gene expression matrix (rows=genes, columns=cells) and metadata; Step 2: Quality Control (QC), filtering low-quality cells based on mitochondrial gene percentage (\\u226420%), total UMIs (\\u2265500), and detected genes using scanpy.pp.calculate_qc_metrics, scanpy.pp.filter_cells, outputting filtered high-quality data;Step 3: Normalization and Highly Variable Gene Selection, standardizing QC-processed data via scanpy.pp.normalize_total, scanpy.pp.log1p, and scanpy.pp.highly_variable_genes to obtain a normalized expression matrix and a list of highly variable genes (HVGs); Step 4: Dimensionality Reduction and Visualization, performing PCA dimensionality reduction using scanpy.tl.pca, constructing a KNN neighborhood graph with scanpy.pp.neighbors, output an AnnData object with dimension-reduced results; Step 5: Clustering Analysis, applying Leiden algorithm via scanpy.tl.leiden and UMAP/t-SNE visualization with scanpy.tl.umap based on dimension-reduced data, sc.tl.leiden(adata, resolution=), sc.pl.umap(adata, color='leiden', show=False, save='cluster_plots.png'), adata.write('./output/019/adata_clustered.h5ad'), outputting cell cluster labels and visualization plots (.png);\", \"id\": \"cell_annotation\", \"shell\": \"\"}"
}