{
    "input": "{\"task\": {\"step_number\": 3, \"description\": \"Convert the SAM file to a BAM file, then sort the BAM file using samtools to prepare it for duplicate marking and recalibration. Sorted BAM files enable efficient processing in downstream tasks.\", \"input_filename\": [\"./data/WGS_WES/rnaseq_1.fastq.gz\", \"./data/WGS_WES/minigenome.fa\", \"./output/001/aligned.sam: reads aligned to reference genome\", \"./output/001/aligned.sam\", \"./data/WGS_WES/rnaseq_2.fastq.gz\"], \"output_filename\": [\"./output/001/aligned.sorted.bam: sorted BAM format of aligned reads\"], \"tools\": \"samtools\"}, \"pre debug\": [], \"result\": \"/cs/student/projects2/aisd/2024/shekchu/miniconda/envs/biomaster/bin/python\\n\", \"related_docs\": \"## Synopsis\\nThis tutorial demonstrates how to explore, process, and manipulate SAM/BAM files using **samtools**. We will walk through installing samtools, creating a demo directory, converting between SAM and BAM formats, sorting, indexing, and selectively viewing alignments.\\n\\n---\\n\\n## Installing samtools\\n```bash\\ncd ~\\nmkdir src          # optional if you do not already have a src directory\\ncd ~/src\\n\\ngit clone https://github.com/samtools/htslib\\ngit clone https://github.com/samtools/samtools\\n\\ncd samtools\\nmake\\ncp samtools ~/bin  # move the samtools binary to your PATH\\n```\\n\\n---\\n\\n## Setup\\n1. **Create** a new directory from your home directory:\\n\\n   ```bash\\n   cd ~\\n   mkdir samtools-demo\\n   cd samtools-demo\\n   ```\\n2. **Download** the sample SAM file and decompress:\\n\\n   ```bash\\n   curl https://s3.amazonaws.com/samtools-tutorial/sample.sam.gz > sample.sam.gz\\n   gzip -d sample.sam.gz\\n   ```\\n\\n---\\n\\n## samtools help\\nTyping `samtools` alone displays the available subcommands. Examples:\\n```bash\\nsamtools view\\nsamtools sort\\nsamtools depth\\n```\\n\\n---\\n\\n## Converting SAM to BAM (`samtools view`)\\n1. **Convert** the SAM file to BAM:\\n   ```bash\\n   samtools view -S -b sample.sam > sample.bam\\n   ```\\n   Here:\\n   - `-S` specifies the input is SAM.\\n   - `-b` specifies to output BAM.\\n   - The `>` redirect writes to `sample.bam`.\\n2. **Check** the BAM contents (by converting back to SAM and showing only the first few lines):\\n   ```bash\\n   samtools view sample.bam | head\\n   ```\\n\\n---\\n\\n## Sorting alignments (`samtools sort`)\\n1. **Sort** the BAM so alignments are in order by genomic position:\\n   ```bash\\n   samtools sort sample.bam -o sample.sorted.bam\\n   ```\\n2. **Inspect** a few lines:\\n   ```bash\\n   samtools view sample.sorted.bam | head\\n   ```\\n   Now the coordinates should appear in ascending order.\\n\\n---\\n\\n## Indexing a sorted BAM (`samtools index`)\\n1. **Index** the sorted BAM:\\n   ```bash\\n   samtools index sample.sorted.bam\\n   ```\\n2. **Check** for the newly created index file (`.bai` extension):\\n   ```bash\\n   ls\\n   ```\\n3. **Use** the index to extract alignments from chromosome 1, positions `33,000,000\\u201334,000,000`:\\n   ```bash\\n   samtools view sample.sorted.bam 1:33000000-34000000\\n   ```\\n   And count how many alignments are in that region:\\n   ```bash\\n   samtools view sample.sorted.bam 1:33000000-34000000 | wc -l\\n   ```\\n\\n---\\n\\n## More on `samtools view`\\n### Viewing a subset of alignments\\n\\n- **Print** the first five lines:\\n  ```bash\\n  samtools view sample.sorted.bam | head -n 5\\n  ```\\n- **Make FLAG more readable** with `-X`:\\n  ```bash\\n  samtools view -X sample.sorted.bam | head -n 5\\n  ```\\n  (Try `samtools view -?` for help on all options.)\\n\\n### Counting alignments\\n```bash\\nsamtools view sample.sorted.bam | wc -l\\n```\\n\\n### Inspecting the header\\n```bash\\nsamtools view -H sample.sorted.bam\\n```\\n\\n### Filtering by FLAG\\n- **Proper pairs** only (`-f 0x2`):\\n  ```bash\\n  samtools view -f 0x2 sample.sorted.bam | wc -l\\n  ```\\n- **NOT properly paired** (`-F 0x2`):\\n  ```bash\\n  samtools view -F 0x2 sample.sorted.bam | wc -l\\n  ```\\n  `-F` indicates **exclude** flags. The counts of `-f 0x2` plus `-F 0x2` should sum to the total number of alignments.\\n\\n---\\n\\n## Summary\\n1. **Install** samtools.\\n2. **Convert** SAM\\u2192BAM.\\n3. **Sort** by genomic position.\\n4. **Index** to enable region queries.\\n5. **View** subsets of data based on coordinates or specific flags.\\n6. **Inspect** headers and other metadata.\\n\\nThis workflow covers basic operations required for many downstream applications (e.g., variant calling or visualization in IGV). For more details, consult the [samtools documentation](https://www.htslib.org/).\\n\\n## FASTQ to BAM/CRAM\\nModern sequencing instruments typically produce *unaligned* data in FASTQ format. We can store unaligned data in BAM or CRAM to include valuable metadata (e.g., headers, auxiliary tags), but the focus here is on producing a **sorted, aligned** BAM or CRAM file.\\n\\n---\\n\\n## Two Main Approaches\\n1. **Alignment / mapping** to a known reference.\\n2. **De-novo assembly** (not covered in detail here).\\n\\n---\\n\\n## Example Workflow for Alignment\\n\\nThis pipeline takes paired FASTQ reads, aligns them to a reference using Minimap2, and produces a sorted, duplicate-marked BAM or CRAM.\\n\\n### Steps Overview\\n1. **Map / align**\\n2. **Fix mate-pair issues** (e.g., with `samtools fixmate`)\\n3. **Mark duplicates (part 1)** \\u2013 add tags needed for later duplication marking\\n4. **Sort** to positional order\\n5. **Mark duplicates (part 2)** \\u2013 final marking of duplicates\\n6. **Convert** to final file format (BAM or CRAM)\\n\\n### Step 1: Mapping\\n```bash\\nminimap2 -t 8 -a -x sr C.Elegans.fa \\\\\\n  SRR065390_1.fastq SRR065390_2.fastq -o CE.sam\\n```\\n- `-t 8`: uses 8 threads.\\n- `-a`: output in SAM.\\n- `-x sr`: sets Minimap2 presets for paired-end short reads.\\n- Output is name-collated (read pairs are together), which is needed for the next step.\\n\\n### Step 2: Fixing Mate-Pair Issues\\n```bash\\nsamtools fixmate -O bam,level=1 CE.sam fixmate.bam\\n```\\n- `samtools fixmate` checks and corrects mate information (FLAG, RNEXT, PNEXT, TLEN).\\n- `-O bam,level=1` outputs BAM with minimal compression for speed.\\n- Add `-m` if you want to populate mate CIGAR (`MC`) and mate score (`ms`) tags:\\n\\n  ```bash\\n  samtools fixmate -O bam,level=1 -m CE.sam fixmate.bam\\n  ```\\n\\n### Step 3 & 4: Sorting to Positional Order\\n```bash\\nsamtools sort -l 1 -@8 -o pos.srt.bam -T /tmp/example_prefix fixmate.bam\\n```\\n- Sort reads by genomic coordinate.\\n- `-@8`: uses 8 threads.\\n- `-l 1`: minimal compression (optional).\\n- `-T /tmp/example_prefix`: prefix for temporary sorting files.\\n\\n### Step 5: Marking Duplicates\\n```bash\\nsamtools markdup -O bam,level=1 pos.srt.bam markdup.bam\\n```\\n- Uses the MC/ms tags from the `-m` fixmate step.\\n\\n### Step 6: Converting to Final Format\\n```bash\\nsamtools view -@8 markdup.bam -o final.bam\\n```\\nor, to produce CRAM:\\n```bash\\nsamtools view -T C.Elegans.fa -@8 markdup.bam -o final.cram\\n```\\n\\n---\\n\\n## Pipelining for Efficiency\\nInstead of writing each intermediate file to disk, we can **pipe** the commands:\\n```bash\\nminimap2 -t 8 -a -x sr C.Elegans.fa SRR065390_[12].fastq | \\\\\\nsamtools fixmate -u -m - - | \\\\\\nsamtools sort -u -@2 -T /tmp/example_prefix - | \\\\\\nsamtools markdup -@8 --reference C.Elegans.fa - final.cram\\n```\\n- `-u` or `-O bam,level=0` keeps data uncompressed in the pipeline for speed.\\n- `set -o pipefail` helps detect errors in earlier commands.\\n\\n---\\n\\n## Converting Back to FASTQ\\nIf the unmapped reads were retained, you can revert your final BAM/CRAM to FASTQ:\\n```bash\\nsamtools sort -n -@8 final.cram | \\\\\\nsamtools fastq - -1 dat_1.fq -2 dat_2.fq > /dev/null\\n```\\n- Sorting by read name (`-n`) is required before producing paired FASTQ.\\n- The original exact FASTQ order is not preserved but is generally unimportant for reanalysis.\\n\\n---\\n\\n## De-novo Assembly\\n- Assemblers produce a consensus FASTA or FASTQ rather than individual alignments.\\n- If you need per-read alignments to the newly assembled consensus, just build an index on the assembly and follow the same **Mapping** steps as above.\\n- For CRAM, ensure you have access to the same consensus reference or embed it:\\n  ```bash\\n  samtools view -O CRAM,embed_ref in.sam -o out.cram\\n  ```\\n\\n---\\n\\n## Key Takeaways\\n- **Name-collated** BAM is essential for certain steps (e.g., `fixmate`, partial duplication marking).\\n- **Coordinate-sorted** BAM is needed for final duplicate marking and most downstream analyses.\\n- **Pipelines** avoid intermediate files, are faster, and use uncompressed or minimal-compression data in memory.\\n- **CRAM** can reduce storage size but requires consistent references.\\n- Always verify each step with basic stats (`samtools flagstat`, etc.) to ensure no unexpected data loss.\\n\", \"id\": \"001\", \"shell\": \"\"}"
}