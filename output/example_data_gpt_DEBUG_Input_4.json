{
    "input": "{\"task\": {\"step_number\": 4, \"description\": \"Mark and remove PCR duplicates using GATK MarkDuplicates to reduce biases introduced by amplification. This step outputs a deduplicated BAM file which is essential for accurate variant calling.\", \"input_filename\": [\"./data/WGS_WES/minigenome.fa\", \"./output/001/aligned.sam\", \"./output/001/aligned.sorted.bam: sorted BAM format of aligned reads\", \"./data/WGS_WES/rnaseq_1.fastq.gz\", \"./data/WGS_WES/rnaseq_2.fastq.gz\"], \"output_filename\": [\"./output/001/aligned.dedup.bam: deduplicated BAM file\"], \"tools\": \"GATK MarkDuplicates\"}, \"pre debug\": [], \"result\": \"Warning: 'conda-forge' already in 'channels' list, moving to the top\\nWarning: 'bioconda' already in 'channels' list, moving to the top\\nUsing GATK jar /cs/student/projects2/aisd/2024/shekchu/miniconda/envs/biomaster/share/gatk4-4.3.0.0-0/gatk-package-4.3.0.0-local.jar\\nRunning:\\n    java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /cs/student/projects2/aisd/2024/shekchu/miniconda/envs/biomaster/share/gatk4-4.3.0.0-0/gatk-package-4.3.0.0-local.jar MarkDuplicates   -I ./output/001/aligned.sorted.bam   -O ./output/001/aligned.dedup.bam   -M ./output/001/marked_dup_metrics.txt   --REMOVE_DUPLICATES false   --VALIDATION_STRINGENCY SILENT\\nUSAGE: MarkDuplicates [arguments]\\n\\nIdentifies duplicate reads.  <p>This tool locates and tags duplicate reads in a SAM, BAM or CRAM file, where duplicate\\nreads are defined as originating from a single fragment of DNA.  Duplicates can arise during sample preparation e.g.\\nlibrary construction using PCR.  See also <a\\nhref='https://broadinstitute.github.io/picard/command-line-overview.html#EstimateLibraryComplexity'>EstimateLibraryComplexity</a>\\nfor additional notes on PCR duplication artifacts.  Duplicate reads can also result from a single amplification cluster,\\nincorrectly detected as multiple clusters by the optical sensor of the sequencing instrument.  These duplication\\nartifacts are referred to as optical duplicates.</p><p>The MarkDuplicates tool works by comparing sequences in the 5\\nprime positions of both reads and read-pairs in a SAM/BAM file.  A BARCODE_TAG option is available to facilitate\\nduplicate marking using molecular barcodes.  After duplicate reads are collected, the tool differentiates the primary\\nand duplicate reads using an algorithm that ranks reads by the sums of their base-quality scores (default method). Note\\nthat this is different from directly checking if the sequences match, which MarkDuplicates does not do.</p>  <p>The\\ntool's main output is a new SAM, BAM or CRAM file, in which duplicates have been identified in the SAM flags field for\\neach read.  Duplicates are marked with the hexadecimal value of 0x0400, which corresponds to a decimal value of 1024. \\nIf you are not familiar with this type of annotation, please see the following <a\\nhref='https://www.broadinstitute.org/gatk/blog?id=7019'>blog post</a> for additional information.</p><p>Although the\\nbitwise flag annotation indicates whether a read was marked as a duplicate, it does not identify the type of duplicate. \\nTo do this, a new tag called the duplicate type (DT) tag was recently added as an optional output in  the 'optional\\nfield' section of a SAM/BAM/CRAM file.  Invoking the TAGGING_POLICY option, you can instruct the program to mark all the\\nduplicates (All), only the optical duplicates (OpticalOnly), or no duplicates (DontTag).  The records within the output\\nof a SAM/BAM/CRAM file will have values for the 'DT' tag (depending on the invoked TAGGING_POLICY), as either\\nlibrary/PCR-generated duplicates (LB), or sequencing-platform artifact duplicates (SQ).  This tool uses the\\nREAD_NAME_REGEX and the OPTICAL_DUPLICATE_PIXEL_DISTANCE options as the primary methods to identify and differentiate\\nduplicate types.  Set READ_NAME_REGEX to null to skip optical duplicate detection, e.g. for RNA-seq or other data where\\nduplicate sets are extremely large and estimating library complexity is not an aim.  Note that without optical duplicate\\ncounts, library size estimation will be inaccurate.</p> <p>MarkDuplicates also produces a metrics file indicating the\\nnumbers of duplicates for both single- and paired-end reads.</p>  <p>The program can take either coordinate-sorted or\\nquery-sorted inputs, however the behavior is slightly different.  When the input is coordinate-sorted, unmapped mates of\\nmapped records and supplementary/secondary alignments are not marked as duplicates.  However, when the input is\\nquery-sorted (actually query-grouped), then unmapped mates and secondary/supplementary reads are not excluded from the\\nduplication test and can be marked as duplicate reads.</p>  <p>If desired, duplicates can be removed using the\\nREMOVE_DUPLICATE and REMOVE_SEQUENCING_DUPLICATES options.</p><h4>Usage example:</h4><pre>java -jar picard.jar\\nMarkDuplicates \\\\<br />      I=input.bam \\\\<br />      O=marked_duplicates.bam \\\\<br />     \\nM=marked_dup_metrics.txt</pre>Please see <a\\nhref='http://broadinstitute.github.io/picard/picard-metric-definitions.html#DuplicationMetrics'>MarkDuplicates</a> for\\ndetailed explanations of the output metrics.<hr />\\nVersion:4.3.0.0\\n\\n\\nRequired Arguments:\\n\\n--INPUT,-I <String>           One or more input SAM, BAM or CRAM files to analyze. Must be coordinate sorted.  This\\n                              argument must be specified at least once. Required. \\n\\n--METRICS_FILE,-M <File>      File to write duplication metrics to  Required. \\n\\n--OUTPUT,-O <File>            The output file to write ma\", \"related_docs\": \"4. run-pairsam-markasdup.sh\\nTakes a pairsam file in and creates a pairsam file with duplicate reads marked\\n* Input: a pairsam file\\n* Output: a duplicate-marked pairsam file\\nUsage\\nRun the following in the container\\nrun-pairsam-markasdup.sh <input_pairsam>\\n# input_pairsam : an input pairsam file.\\n# outprefix : prefix of output files\\n\\nSet parameters according to the example:\\nSuppose the input file is:  ./output/003/out.merged.sam.pairs.gz,the target is ./output/003/out1.  Generate the following sample script:\\n\\nbash ./scripts/run-pairsam-markasdup.sh  ./output/003/out.merged.sam.pairs.gz  ./output/003/out1  \\n\\nYou can install the tool, but do not do any additional operations.Please follow the example to generate rather than copy and paste completely, especially for folder names, file names, etc.and 64 indicate the number of threads.\\n\\n## Overview\\n\\nBWA (Burrows-Wheeler Aligner) is a widely used sequence alignment tool designed for mapping low-divergent reads to large reference genomes (e.g., human genomes). BWA includes three main algorithms:\\n\\n1. **BWA-backtrack**: Optimized for short reads up to 100 bp.\\n2. **BWA-SW**: Optimized for longer sequences (70 bp to 1 Mbps), supports long reads and split alignment.\\n3. **BWA-MEM**: The newest algorithm in the BWA suite, recommended for high-quality reads. It is both fast and accurate, with support for read lengths from 70 bp to 1 Mbps. BWA-MEM also performs well for reads between 70 and 100 bp.\\n\\nAmong these, **BWA-MEM** is widely used due to its balance of speed and accuracy, making it suitable for various downstream applications, such as whole-genome variant calling. It supports long reads, split alignment, and chimeric reads, and outputs standard SAM files that are compatible with tools like samtools and GATK.\\n\\nBefore running BWA-MEM, you must build an FM-index of the reference genome using the `bwa index` command. Once the index is created, you can align reads to the reference genome with the `bwa mem` sub-command.\\n\\n---\\n\\n## Installation\\n\\n1. **Download the BWA package**: Obtain the source code from the official repository.\\n2. **Compile and install**: Typically, you will use a C compiler (e.g., GCC). The official documentation provides detailed build instructions.\\n3. **Finalize installation**: Make sure your environment variables or system PATH are set correctly so you can call `bwa` directly.\\n\\n---\\n\\n## Quick Start\\n\\n1. **Indexing the reference genome**:\\n\\n```bash\\nbwa index reference.fa\\n```\\n\\nThis command builds the required FM-index for the reference genome `reference.fa`.\\n\\n2. **Running the alignment**:\\n\\n```bash\\nbwa mem reference.fa reads.fq > alignment.sam\\n```\\n\\nAligns the reads in `reads.fq` to the reference `reference.fa` and writes the alignment in SAM format to `alignment.sam`.\\n\\n---\\n\\n## Examples of Popular Commands\\n\\nBelow are five common BWA-MEM usage examples:\\n\\n1. **Indexing a reference genome with a custom prefix**:\\n\\n```bash\\nbwa index -p ref_index reference.fa\\n```\\n\\nGenerates an index for `reference.fa` with the prefix `ref_index`.\\n\\n2. **Single-end read alignment**:\\n\\n```bash\\nbwa mem ref_index reads.fq > aligned_reads.sam\\n```\\n\\nAligns single-end reads in `reads.fq` to the reference indexed by `ref_index` and outputs the result to `aligned_reads.sam`.\\n\\n3. **Paired-end read alignment**:\\n\\n```bash\\nbwa mem ref_index reads_1.fq reads_2.fq > aligned_pair.sam\\n```\\n\\nAligns paired-end reads in `reads_1.fq` and `reads_2.fq` and saves them to `aligned_pair.sam`.\\n\\n4. **Generating a sorted BAM file directly**:\\n\\n```bash\\nbwa mem ref_index reads.fq | samtools sort -o sorted_reads.bam\\n```\\n\\nPipes the alignment output from BWA to samtools and sorts it before writing to `sorted_reads.bam`.\\n\\n5. **Using extra options for speed or marking secondary alignments**:\\n\\n```bash\\nbwa mem -t 4 -M ref_index reads.fq > aligned_reads.sam\\n```\\n\\n- `-t 4`: Use 4 threads for faster alignment.\\n- `-M`: Mark shorter split alignments as secondary, which helps compatibility with certain downstream tools (e.g., Picard).\\n\\n---\\n\\n## Learning Objectives (Variant Calling Workflow)\\n\\n- Exploring the variant calling workflow\\n- Choosing suitable BWA parameters for your dataset\\n- Understanding alignment clean-up steps\\n\\n---\\n\\n## Variant Calling Workflow\\n\\nA typical variant calling workflow includes:\\n\\n1. Quality control (QC)\\n2. Alignment (e.g., using BWA)\\n3. Alignment clean-up (e.g., marking duplicates, sorting)\\n4. Variant calling\\n5. Variant filtering and annotation\\n\\nAfter obtaining raw sequencing data, you typically use tools like FastQC to check read quality. Next, you align the reads to a reference genome and clean up the alignments before applying variant-calling tools (e.g., GATK or samtools/bcftools) and then filter/annotate the resulting variants.\\n\\n---\\n\\n## Environment and Directory Setup\\n\\nIn a cluster environment (e.g., Harvard\\u2019s O2), the process might be as follows:\\n\\n1. **Request an interactive session** (example command):\\n\\n```bash\\nsrun --pty -p interactive -t 0-6:00 --mem 8G -c 2 --reservation=HBC bash\\n```\\n\\n2. **Create project directories**:\\n\\n```bash\\nmkdir ~/var-calling\\ncd ~/var-calling\\n\\nmkdir -p raw_data reference_data scripts logs meta results/bwa\\n```\\n\\n3. **Copy required data**:\\n\\n```bash\\ncp /n/groups/hbctraining/ngs-data-analysis-longcourse/var-calling/raw_fastq/*fq raw_data/\\ncp /n/groups/hbctraining/ngs-data-analysis-longcourse/var-calling/reference_data/chr20.fa reference_data/\\n```\\n\\nIn this tutorial, we use a subset of the Genome in a Bottle (GIAB) NA12878 data (human genome reads restricted to chromosome 20), consisting of ~4 million paired-end reads.\\n\\n---\\n\\n## QC and Alignment\\n\\n1. **Skipping QC**: Typically you would use FastQC, but for demonstration we skip that step.\\n2. **Aligner choice**: BWA is often preferred in variant calling for its high accuracy. Minimal misalignment can help avoid false positives in variant detection.\\n3. **BWA modes**:\\n   - BWA-backtrack: Up to 100-bp reads\\n   - BWA-SW: Longer reads (70 bp ~ 1 Mbps) with split alignment\\n   - BWA-MEM: Newest, recommended for most use cases, supports long reads and high accuracy\\n\\nIn most variant-calling workflows, **BWA-MEM** is used.\\n\\n---\\n\\n## Using BWA-MEM for Alignment\\n\\n### 1. Creating a BWA-MEM Index\\n\\n```bash\\ncd ~/var-calling/reference_data\\nmodule load gcc/6.2.0 bwa/0.7.8\\n\\nbwa index -p chr20 chr20.fa\\n```\\n\\n- `-p chr20`: Uses `chr20` as the prefix for all index files.\\n- `chr20.fa`: Reference genome file (only chromosome 20 here).\\n\\n### 2. Aligning Reads\\n\\n```bash\\ncd ~/var-calling\\n\\nbwa mem -M -t 2 \\\\\\n  reference_data/chr20 \\\\\\n  raw_data/na12878_1.fq raw_data/na12878_2.fq \\\\\\n  2> logs/bwa.err \\\\\\n  > results/bwa/na12878.sam\\n```\\n\\n- `-M`: Marks shorter split hits as secondary, helpful for some downstream tools.\\n- `-t 2`: Uses 2 threads.\\n- `2> logs/bwa.err`: Redirects standard error to a log file.\\n- `> results/bwa/na12878.sam`: Writes output to `na12878.sam`.\\n\\n---\\n\\n## Alignment Clean-up\\n\\nFor variant calling, marking duplicates is crucial to avoid PCR artifact errors.\\n\\n### 1. Installing/Loading Picard\\n\\n```bash\\nmodule spider picard\\nmodule load picard/2.8.0\\n```\\n\\nUsage:\\n\\n```bash\\njava -jar $PICARD/picard-2.8.0.jar [ToolName] [options]\\n```\\n\\n### 2. Sorting by Coordinate (SortSam)\\n\\nPicard\\u2019s `SortSam` tool sorts SAM/BAM files by coordinate. Key options:\\n- `INPUT`: Input file (SAM/BAM)\\n- `OUTPUT`: Output file (SAM/BAM)\\n- `SORT_ORDER`: Sort order (e.g., coordinate, queryname)\\n- `VALIDATION_STRINGENCY`: Level of validation (set to `SILENT` to avoid errors from BWA\\u2019s unmapped flags)\\n\\nExample:\\n\\n```bash\\ncd results/bwa\\n\\njava -Xmx8G -jar $PICARD/picard-2.8.0.jar SortSam \\\\\\n  INPUT=na12878.sam \\\\\\n  OUTPUT=na12878_sorted.sam \\\\\\n  SORT_ORDER=coordinate \\\\\\n  VALIDATION_STRINGENCY=SILENT\\n```\\n\\n### 3. Marking Duplicates (MarkDuplicates)\\n\\nPicard\\u2019s `MarkDuplicates` identifies and tags duplicate reads (PCR or optical) in BAM/SAM files. Key options:\\n- `INPUT`: Sorted input file\\n- `OUTPUT`: Output file\\n- `METRICS_FILE`: File to write duplication metrics\\n- `ASSUME_SORTED`: Set to true if the input is coordinate-sorted\\n- `VALIDATION_STRINGENCY`: Similar to above\\n\\nExample:\\n\\n```bash\\njava -Xmx8G -jar $PICARD/picard-2.8.0.jar MarkDuplicates \\\\\\n  INPUT=na12878_sorted.sam \\\\\\n  OUTPUT=na12878_sorted_marked.bam \\\\\\n  METRICS_FILE=metrics.txt \\\\\\n  ASSUME_SORTED=true \\\\\\n  VALIDATION_STRINGENCY=SILENT\\n```\\n\\n`-Xmx8G` ensures Java uses no more than 8 GB of memory (adjust if needed for larger data).\\n\\n### 4. Creating an Index for the BAM File\\n\\nUse samtools to index the marked BAM file for visualization or downstream steps:\\n\\n```bash\\nmodule load gcc/6.2.0 samtools/1.9\\n\\nsamtools index na12878_sorted_marked.bam\\n```\\n\\n---\\n\\n## Summary\\n\\nFollowing these steps, you have:\\n1. Used **BWA-MEM** to align reads to a reference genome\\n2. Sorted the alignment results\\n3. Marked duplicates\\n4. Created an index for the final BAM file\\n\\nThe resulting file can now be used in subsequent variant-calling pipelines (e.g., GATK or bcftools), followed by variant filtering and annotation. These materials are adapted from open-access teaching materials by the Harvard Chan Bioinformatics Core (HBC).\", \"id\": \"001\", \"shell\": [\"conda install -y gatk4 samtools openjdk\", \"gatk MarkDuplicates \\\\  -I ./output/001/aligned.sorted.bam \\\\  -O ./output/001/aligned.dedup.bam \\\\  -M ./output/001/marked_dup_metrics.txt \\\\  --REMOVE_DUPLICATES false \\\\  --VALIDATION_STRINGENCY SILENT\", \"samtools index ./output/001/aligned.dedup.bam\"]}"
}